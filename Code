
/*********
CO2 Luftqualit√§t mit esp8266 oder Arduino Nano, ccs811, ws2812 und optional mit DHT22 Temperatursensor und OLED Display 128*32
*********/
// Anschluss am Wemos D1
//SDA an D2, SCL an D1, Vcc an 3,3V und GND an GND
//WS2812 an 5V (Vin), GND und Data an D8
//DHT22 an 3,3V, GND und out an D6
//
//Anschluss am Arduino Nano
//SDA an A4, SCL an A5, Vcc an 3,3V und GND an GND
//WS2812 an 5V (Vin), GND und Data an A1
//DHT22 an 3,3V, GND und out an D12
//
#include <ESP8266WiFi.h>   //auskommentieren wenn ein Arduino Nano verwendet wird
#include "SparkFunCCS811.h" 
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_NeoPixel.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>

#define CCS811_ADDR 0x5A //Alternative I2C Addresse des CCS811 Sensors
#define NUM_PIXEL 35    //Anzahl der WS2812 LEDs
#define PIN 15          // Data Anschluss des WS2812 Wemos D8
Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_PIXEL, PIN, NEO_GRB + NEO_KHZ800);
CCS811 mySensor(CCS811_ADDR);     //CCS811 Sensorlibrary von Sparkfun
#define DHTPIN D6        //Anschluss des DHT Sensors Wemos D6
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels
#define DHTTYPE    DHT22     // DHT 22 (AM2302)

#define DISPLAY     //auskommentieren, wenn kein Display verwendet wird
//#define DHTSENSOR   //auskommentieren, wenn kein DHT22 Sensor verwendet wird
#define WLAN        //auskommentieren, wenn kein WLAN verwendet wird (z.B. bei verwendung des Arduino Nanos)


DHT_Unified dht(DHTPIN, DHTTYPE);
uint32_t delayMS;
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire);

// Replace with your network credentials
const char* ssid     = "wlanSSID";
const char* password = "WLAN Passwort";

// Set web server port number to 80
WiFiServer server(80);

// Variable to store the HTTP request
String header;
int TEMP = 0;
int RLF = 0;
unsigned int CO2 = 400;
unsigned int TVOC = 0;

unsigned int IP01 = 1;
unsigned int IP02 = 9;
unsigned int IP03 = 2;

unsigned int IP11 = 1;
unsigned int IP12 = 6;
unsigned int IP13 = 8;

unsigned int IP21 = 0;
unsigned int IP22 = 0;
unsigned int IP23 = 4;

unsigned int IP31 = 0;
unsigned int IP32 = 0;
unsigned int IP33 = 1;

// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0; 
// Define timeout time in milliseconds (example: 2000ms = 2s)
const long timeoutTime = 2000;



void setup() {
 Serial.begin(115200);
    Wire.begin();
      dht.begin();
   strip.begin();
  clearStrip();
  strip.show();
  strip.setBrightness(200);
 
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

if (mySensor.begin() == false)
  {
    Serial.print("CCS811 error. Please check wiring. Freezing...");
    while (1)
      ;
  }
  // Clear the buffer
  display.clearDisplay();

  // text display tests
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println("CO2 Ampel");
  display.setTextSize(1);
    display.setCursor(0,16);
  display.println("Markus Weber");
  display.display();
  
  display.clearDisplay();
 // Connect to Wi-Fi network with SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(250);
    Serial.print(".");
    strip.setPixelColor(17,255,0,0); 
     strip.show(); //Output on strip
     delay(250);
     clearStrip();
     strip.show(); //Output on strip
  }
  // Print local IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
 display.println(WiFi.localIP());
 display.display();
  display.clearDisplay();
  
      clearStrip();
         for (uint16_t L = 0; L < (NUM_PIXEL); L++) {
                strip.setPixelColor(L,0,255,0); 
      }
      strip.show(); //Output on strip
      delay(2000);
  





 
IPAddress myIp = WiFi.localIP();

Serial.println( myIp[0]);
Serial.println(myIp[0]/100);
IP01 = myIp[0]/100;
         clearStrip();
         for (uint16_t L = 0; L < (IP01); L++) {
         strip.setPixelColor(17,0,255,0); 
         strip.show(); //Output on strip
         delay(1000);
         clearStrip();
         strip.show(); //Output on strip
         delay(500);
 }
         clearStrip();
         strip.setPixelColor(17,0,255,255);
         strip.show(); //Output on strip
         delay(2000);
Serial.println((myIp[0]-((myIp[0]/100)*100))/10);
IP02 = (myIp[0]-((myIp[0]/100)*100))/10;
         clearStrip();
         for (uint16_t L = 0; L < (IP02); L++) {
         strip.setPixelColor(17,0,255,0); 
         strip.show(); //Output on strip
         delay(1000);
         clearStrip();
         strip.show(); //Output on strip
         delay(500);
 }
         clearStrip();
         strip.setPixelColor(17,0,255,255);
         strip.show(); //Output on strip
         delay(2000);
Serial.println(myIp[0]-((myIp[0]/10)*10));
IP03 =  myIp[0]-((myIp[0]/10)*10);
         clearStrip();
         for (uint16_t L = 0; L < (IP03); L++) {
         strip.setPixelColor(17,0,255,0); 
         strip.show(); //Output on strip
         delay(1000);
         clearStrip();
         strip.show(); //Output on strip
         delay(500);
 }
         clearStrip();
         strip.setPixelColor(17,0,255,255);
         strip.show(); //Output on strip
         delay(2000);

     clearStrip();
     strip.setPixelColor(17,255,0,0); 
     strip.show(); //Output on strip
     delay(1000);
     clearStrip();
     delay(500);
     strip.show(); //Output on strip
Serial.println( myIp[1]);

Serial.println(myIp[1]/100);
IP11 = myIp[1]/100;
         clearStrip();
         for (uint16_t L = 0; L < (IP11); L++) {
         strip.setPixelColor(17,0,255,0); 
         strip.show(); //Output on strip
         delay(1000);
         clearStrip();
         strip.show(); //Output on strip
         delay(500);
 }
         clearStrip();
         strip.setPixelColor(17,0,255,255);
         strip.show(); //Output on strip
         delay(2000);

Serial.println((myIp[1]-((myIp[1]/100)*100))/10);
IP12 = (myIp[1]-((myIp[1]/100)*100))/10;
         clearStrip();
         for (uint16_t L = 0; L < (IP12); L++) {
         strip.setPixelColor(17,0,255,0); 
         strip.show(); //Output on strip
         delay(1000);
         clearStrip();
         strip.show(); //Output on strip
         delay(500);
 }
         clearStrip();
         strip.setPixelColor(17,0,255,255);
         strip.show(); //Output on strip
         delay(2000);
Serial.println(myIp[1]-((myIp[1]/10)*10));
IP13 =  myIp[1]-((myIp[1]/10)*10);
         clearStrip();
         for (uint16_t L = 0; L < (IP13); L++) {
         strip.setPixelColor(17,0,255,0); 
         strip.show(); //Output on strip
         delay(1000);
         clearStrip();
         strip.show(); //Output on strip
         delay(500);
 }
         clearStrip();
         strip.setPixelColor(17,0,255,255);
         strip.show(); //Output on strip
         delay(2000);

clearStrip();
     strip.setPixelColor(17,255,0,0); 
     strip.show(); //Output on strip
     delay(1000);
     clearStrip();
     delay(500);
     strip.show(); //Output on strip
         
Serial.println( myIp[2]);

Serial.println(myIp[2]/100);
IP21 = myIp[2]/100;
clearStrip();
         for (uint16_t L = 0; L < (IP21); L++) {
         strip.setPixelColor(17,0,255,0); 
         strip.show(); //Output on strip
         delay(1000);
         clearStrip();
         strip.show(); //Output on strip
         delay(500);
 }
         clearStrip();
         strip.setPixelColor(17,0,255,255);
         strip.show(); //Output on strip
         delay(2000);
Serial.println((myIp[2]-((myIp[2]/100)*100))/10);
IP22 = (myIp[2]-((myIp[2]/100)*100))/10;

     clearStrip();
         for (uint16_t L = 0; L < (IP22); L++) {
         strip.setPixelColor(17,0,255,0); 
         strip.show(); //Output on strip
         delay(1000);
         clearStrip();
         strip.show(); //Output on strip
         delay(500);
 }
         clearStrip();
         strip.setPixelColor(17,0,255,255);
         strip.show(); //Output on strip
         delay(2000);

Serial.println(myIp[2]-((myIp[2]/10)*10));
IP23 =  myIp[2]-((myIp[2]/10)*10);
clearStrip();
         for (uint16_t L = 0; L < (IP23); L++) {
         strip.setPixelColor(17,0,255,0); 
         strip.show(); //Output on strip
         delay(1000);
         clearStrip();
         strip.show(); //Output on strip
         delay(500);
 }
         clearStrip();
         strip.setPixelColor(17,0,255,255);
         strip.show(); //Output on strip
         delay(2000);

         clearStrip();
     strip.setPixelColor(17,255,0,0); 
     strip.show(); //Output on strip
     delay(1000);
     clearStrip();
     delay(500);
     strip.show(); //Output on strip
Serial.println( myIp[3]);

Serial.println(myIp[3]/100);
IP31 = myIp[3]/100;
clearStrip();
         for (uint16_t L = 0; L < (IP31); L++) {
         strip.setPixelColor(17,0,255,0); 
         strip.show(); //Output on strip
         delay(1000);
         clearStrip();
         strip.show(); //Output on strip
         delay(500);
 }
         clearStrip();
         strip.setPixelColor(17,0,255,255);
         strip.show(); //Output on strip
         delay(2000);

Serial.println((myIp[3]-((myIp[3]/100)*100))/10);
IP32 = (myIp[3]-((myIp[3]/100)*100))/10;
clearStrip();
         for (uint16_t L = 0; L < (IP32); L++) {
         strip.setPixelColor(17,0,255,0); 
         strip.show(); //Output on strip
         delay(1000);
         clearStrip();
         strip.show(); //Output on strip
         delay(500);
 }
         clearStrip();
         strip.setPixelColor(17,0,255,255);
         strip.show(); //Output on strip
         delay(2000);
Serial.println(myIp[3]-((myIp[3]/10)*10));
IP33 =  myIp[3]-((myIp[3]/10)*10);
clearStrip();
         for (uint16_t L = 0; L < (IP33); L++) {
         strip.setPixelColor(17,0,255,0); 
         strip.show(); //Output on strip
         delay(1000);
         clearStrip();
         strip.show(); //Output on strip
         delay(500);
 }
         clearStrip();
         strip.setPixelColor(17,0,255,255);
         strip.show(); //Output on strip
         delay(2000);
clearStrip();
     strip.setPixelColor(17,255,0,0); 
     strip.show(); //Output on strip
     delay(1000);
     clearStrip();
     delay(500);
     strip.show(); //Output on strip




#ifdef DHTSENSOR
 // Print temperature sensor details.
  sensor_t sensor;
  dht.temperature().getSensor(&sensor);
  Serial.println(F("------------------------------------"));
  Serial.println(F("Temperature Sensor"));
  Serial.print  (F("Sensor Type: ")); Serial.println(sensor.name);
  Serial.print  (F("Driver Ver:  ")); Serial.println(sensor.version);
  Serial.print  (F("Unique ID:   ")); Serial.println(sensor.sensor_id);
  Serial.print  (F("Max Value:   ")); Serial.print(sensor.max_value); Serial.println(F("¬∞C"));
  Serial.print  (F("Min Value:   ")); Serial.print(sensor.min_value); Serial.println(F("¬∞C"));
  Serial.print  (F("Resolution:  ")); Serial.print(sensor.resolution); Serial.println(F("¬∞C"));
  Serial.println(F("------------------------------------"));
  // Print humidity sensor details.
  dht.humidity().getSensor(&sensor);
  Serial.println(F("Humidity Sensor"));
  Serial.print  (F("Sensor Type: ")); Serial.println(sensor.name);
  Serial.print  (F("Driver Ver:  ")); Serial.println(sensor.version);
  Serial.print  (F("Unique ID:   ")); Serial.println(sensor.sensor_id);
  Serial.print  (F("Max Value:   ")); Serial.print(sensor.max_value); Serial.println(F("%"));
  Serial.print  (F("Min Value:   ")); Serial.print(sensor.min_value); Serial.println(F("%"));
  Serial.print  (F("Resolution:  ")); Serial.print(sensor.resolution); Serial.println(F("%"));
  Serial.println(F("------------------------------------"));
  // Set delay between sensor readings based on sensor details.
  delayMS = sensor.min_delay / 1000;

 
#endif

  
server.begin();
  
}
 
void loop() {
 delay(delayMS);
   //Check to see if data is ready with .dataAvailable()
  if (mySensor.dataAvailable())
  {
    //If so, have the sensor read and calculate the results.
    //Get them later
    mySensor.readAlgorithmResults();

    Serial.print("CO2: ");
    //Returns calculated CO2 reading
    Serial.print(mySensor.getCO2());
    Serial.print(" ppm  tVOC: ");
    //Returns calculated TVOC reading
    Serial.print(mySensor.getTVOC());
     Serial.print(" ppb");
    
    Serial.println();
  }

  delay(10); //Don't spam the I2C bus
 
#ifdef DHTSENSOR  
  // Get temperature event and print its value.
  sensors_event_t event;
  dht.temperature().getEvent(&event);
  if (isnan(event.temperature)) {
    Serial.println(F("Error reading temperature!"));
  }
  else {
    Serial.print(F("Temperatur: "));
    Serial.print(event.temperature-2);
    Serial.println(F("¬∞C"));
     display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.print(F("T:"));
  display.print(event.temperature-2);
  display.print((char)247);
  display.print(F("C"));
  TEMP = event.temperature-2;
  }
  // Get humidity event and print its value.
  dht.humidity().getEvent(&event);
  if (isnan(event.relative_humidity)) {
    Serial.println(F("Error reading humidity!"));
  }
  else {
    Serial.print(F("Humidity: "));
    Serial.print(event.relative_humidity);
    Serial.println(F("%"));
    display.setCursor(61,0);
    display.print(F("F:"));
    display.print(event.relative_humidity);
    display.println(F("%"));
    RLF = event.relative_humidity;
  }

#endif  
      display.setCursor(0,16);
    display.print(F("CO2:"));
    display.print(mySensor.getCO2());
    display.println(F("ppm"));
      display.setCursor(61,16);
    display.print(F("tVOC:"));
    display.print(mySensor.getTVOC());
    display.println(F("ppb"));
    
  delay(1000);
  
  // text display 

  display.display();
  
  
  display.clearDisplay();


  



CO2 = mySensor.getCO2();
TVOC = mySensor.getTVOC();

  if ((CO2) < 2100) {
    { int t = map(CO2, 350, 2100, 0, NUM_PIXEL);
      for (uint16_t L = 0; L < t; L++) {
        clearStrip();
        strip.setPixelColor(L, wheel(((0 + (L * 3)) & 255))); //Gradient from blue (cold) to green (ok) to red (warm), first value here 170 = start color, second value here 42 = end color
      }
      strip.show(); //Output on strip
      delay(1000);
    }
  }
  else {
    (CO2) = 2100;
    { int t = map(CO2, 350, 2100, 0, NUM_PIXEL);
     for (uint16_t L = 0; L < t; L++) {
        clearStrip();
        strip.setPixelColor(L, wheel(((0 + (L * 3)) & 255))); //Gradient from blue (cold) to green (ok) to red (warm), first value here 170 = start color, second value here 42 = end color
      }
      strip.show(); //Output on strip
      delay(1000);
    }
    // Wait
    delay(1000);
  }
 
  
 }
//Color wheel ################################################################
uint32_t wheel(byte WheelPos) {
  if (WheelPos < 85) {
    return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  }
  else if (WheelPos < 170) {
    WheelPos -= 85;
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  else {
    WheelPos -= 170;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
}
void clearStrip() {
  for (int i = 0; i < NUM_PIXEL; i++) {
    strip.setPixelColor(i, 0);
  }
  
  
  WiFiClient client = server.available();   // Listen for incoming clients

  if (client) {                             // If a new client connects,
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    currentTime = millis();
    previousTime = currentTime;
    while (client.connected() && currentTime - previousTime <= timeoutTime) { // loop while the client's connected
      currentTime = millis();         
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
            
            
            
            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
         
            
            
            // Web Page Heading
            client.println("<body><h1>CO2 Ampel</h1>");
            
            // Display current state
            client.println("<p>" );
            client.println("CO2:");
            client.println(mySensor.getCO2());
            client.print("ppm");
            client.println("<p>");

            client.println("<p>" );
            client.println("TVOC:");
            client.println(mySensor.getTVOC());
            client.print("ppb");
            client.println("<p>");
#ifdef DHTSENSOR
            client.println("<p>" );
            client.println("Temperatur: ");
            client.println(TEMP);
            client.print(char(176));
            client.print("C");
            client.println("<p>");


             client.println("<p>" );
            client.println("rel. Luftfeuchte: ");
            client.println(RLF);
            client.print("%");
            client.println("<p>");
#endif            
            client.println("WiFi connected.");
            client.println("<p>");
            client.println("IP address: ");
            client.println(WiFi.localIP());
                       
                       
            client.println("</body></html>");
            
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}
